{"ast":null,"code":"var _jsxFileName = \"/Users/estellesusanto/Documents/store/website/urban-vogue/client/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n\n    this.callApi = async () => {\n      // GET request in react is fetch\n      // await allows us to wait for the response of an asynchronous request \n      // tests to make sure that the api is available\n      const response = await fetch('localhost:3000/api/hello'); // calling the GET\n\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); // await allows us to wait for the response of an asynchronous request \n      //(a Promise to resolve to a value, request to finish)\n      // defining the post call\n\n      const response = await fetch('/api/world', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          post: this.state.post\n        })\n      }); // calling the post call\n\n      const body = await response.text(); // saving the response of the post in a variable that\n      // was initialized in the state\n\n      this.setState({\n        responseToPost: body\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Edit \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Learn React\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.state.response), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Post to Server: \")), React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.post,\n        onChange: e => this.setState({\n          post: e.target.value\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.state.responseToPost));\n    };\n  }\n\n  // Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/estellesusanto/Documents/store/website/urban-vogue/client/src/App.js"],"names":["React","Component","App","state","response","post","responseToPost","callApi","fetch","body","json","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","setState","render","logo","target","value","componentDidMount","then","res","express","catch","err","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  // Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({response: res.express}))\n      .catch(err=> console.log(err));\n  };\n\n  callApi = async () => {\n    // GET request in react is fetch\n    // await allows us to wait for the response of an asynchronous request \n    // tests to make sure that the api is available\n    const response = await fetch('localhost:3000/api/hello');\n\n    // calling the GET\n    const body = await response.json();\n    \n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  // in order for await to work, we need to wrap it in an async function\n  handleSubmit = async e => {\n    e.preventDefault();\n    // await allows us to wait for the response of an asynchronous request \n    //(a Promise to resolve to a value, request to finish)\n    // defining the post call\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({post: this.state.post}),\n    });\n\n    // calling the post call\n    const body = await response.text();\n\n    // saving the response of the post in a variable that\n    // was initialized in the state\n    this.setState({responseToPost: body})\n  };\n\n  // The only method you MUST define in a React.Component\n  render = () => {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>\n          {this.state.response}\n        </p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server: </strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({post: e.target.value})}/>\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>\n          {this.state.responseToPost}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}